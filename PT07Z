#include<iostream>
#include<queue>
#include<stdio.h>
#include<stdlib.h>
using namespace std;

struct comp
{
bool operator()(const pair<int,int>& i,const pair<int,int>& i1)
{
return i.second>i1.second;
}
};
int mst(int e1[],int e2[],int w[],int m,int n,int sou,int stat)
{
priority_queue<pair<int,int>,vector<pair<int,int> >,comp> p;
int i;
int *dist=(int*)calloc(sizeof(int),m+2);
vector<pair<int,int> > v[n+1];
for(i=0;i<m;i++)
{
v[e1[i]].push_back(make_pair(e2[i],w[i]));
v[e2[i]].push_back(make_pair(e1[i],w[i]));
}
int max=0,ind;
int *check=(int*)calloc(sizeof(int),n+1);
int cost=0,count=0;
int c_v=sou;
check[c_v]=1;
//printf("checked %d\n",c_v);
int ans=1;
count=1;
//int count=1;
while(count!=n)
{
ans=0;
//printf("hi");
//ans=0;
//print
for(i=0;i<v[c_v].size();i++)
{
pair<int,int> p1=v[c_v][i];
if(cost+p1.second>dist[p1.first]&&!check[p1.first])
{
dist[p1.first]=cost+p1.second;
//printf("updated %d with a cost of %d\n",p1.first,cost+p1.second);
if(dist[p1.first]>max)
{
max=dist[p1.first];
ind=p1.first;
}
p.push(make_pair (p1.first,cost+p1.second));
}
}
pair<int,int> o=p.top();
p.pop();
//printf("popped %d %d\n",o.first,o.second);
c_v=o.first;
cost=o.second;
check[c_v]=1;
//printf("checked %d\n",c_v);

count++;
}
//printf("the city with the longest distance is %d with a cost of %d\n",ind,max);
//return cost;
if(stat==0)
return ind;
else
return max;
}
int main()
{
int n,m,i,t;
//scanf("%d",&t);
t=1;
while(t--)
{
scanf("%d",&n);
m=n-1;
int e1[m],e2[m],w[m];
for(i=0;i<m;i++)
{
scanf("%d%d",&e1[i],&e2[i]);
w[i]=1;
}
int ver=mst(e1,e2,w,m,n,1,0);
printf("%d\n",mst(e1,e2,w,m,n,ver,1));
}
//scanf("%d",&n);
return 0;
//
}


